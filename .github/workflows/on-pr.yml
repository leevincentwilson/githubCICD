name: PR
on:
  pull_request:
    branches: [ main ]
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  Install-And-Cache:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Install node modules
        run: npm ci
  Build:
    runs-on: ubuntu-latest
    needs: Install-And-Cache
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - uses: ./.github/actions/cache
      - name: "===== Build ====="
        run: npm run build
  Lint:
    runs-on: ubuntu-latest
    needs: Install-And-Cache
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/cache
        with:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - name: "===== Lint ====="
        run: npm run lint
  UnitTest:
    runs-on: ubuntu-latest
    needs: Install-And-Cache
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/cache
        with:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - name: "===== Unit Tests ====="
        run: npm run test:unit
  Code_Quality_Scan:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
      - name: ========== call custom action to execute CodeQuality Scan ==========
        uses: DigitalInnovation/cloud-devsecops-pipelineactions/workflows/codequality@latest
        with:
          build_tool: npm
          build_file_name: package.json
          build_file_path: .
          cq_host_url: ${{env.SONAR_CLOUD_URL }}
          cq_project_name: ${{ secrets.SONAR_PROJECT_NAME }}
          cq_project_key: ${{ secrets.SONAR_PROJECT_KEY }}
          cq_token: ${{ secrets.SONAR_TOKEN }}
          cq_scan_arguments: -Dsonar.organization=digitalinnovation


  # ##===========================================================================================================================================#
  # Appsec Scans are mandated for All Projects and has to be included in your pipeline - Set the scan flags based on your project requirements.

  Run_appsec_scans:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: Pre-Work
    steps:
      - uses: actions/checkout@v3
      ####  Run Composite actions to execute Various APP SEC scan per requirement  ####
      - uses: DigitalInnovation/cloud-devsecops-pipelineactions/workflows/appsec@latest
        with:
          # Set Flag to true if you want to run Dependency (SNYK) Scan,provide Name of the project Example: Test and Token should be created as GitHub secret
          run_dependency_scan: true
          application_name: ${{env.APPLICATION_NAME}}  # Name of your Application
          dependency_scan_token: ${{ secrets.SNYK_API_TOKEN }}
          build_tool: npm
          #dependency_scan_arguments:
          # Set Flag to true if you want to run Container (PRISMA) Scan,provide  Scanner Console URL,Access Key ID and Secret Key should be created as GitHub secret
          run_container_scan: true
          container_scan_url: ${{env.PRISMA_URL}}
          container_scan_user: ${{secrets.PRISMA_ACCESS_KEY_ID}}
          container_scan_password: ${{ secrets.PRISMA_SECRET_KEY }}
          #container_scan_arguments:
          # Provide image name,tag, to be pulled in ACR. Example: nginx,
          image_name:  ${{env.CONTAINER_IMAGE_NAME}}
          #devsecops_node_sample
          image_tag: ${{ github.run_number }}
          # ACR/GCR Login Server name,Username and Password Example: <ACRname>azurecr.io
          registry_server: ${{needs.Pre-Work.outputs.GH_REGISTRY_SERVER_LOWERCASE}}   # reference from output of job: Pre-Work
          registry_username: ${{ secrets.SAML_GITHUB_USER }}
          registry_password: ${{ secrets.SAML_GITHUb_TOKEN }}
          # Set Flag to true if you want to run SAST (Fortify) Scan, provide Release ID,Scanner API Key and Scanner API secret should be created as secret
          run_sast_scan: true
          sast_release_id: ${{ secrets.FORTIFY_RELEASE_ID }}
          sast_api_key: ${{ secrets.FORTIFY_CLIENT_ID}}
          sast_api_secret: ${{ secrets.FORTIFY_CLIENT_SECRET}}
          # flag download the sast scan result, if run_sast_scan: true
          #sast_scan_arguments:
          download_sast_scan_result: false

##============================END OF PIPELINE WORKFLOW=================================================================================#
